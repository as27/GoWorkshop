Interfaces
01 Grundlagen

Andreas Schröpfer
@lyckade

* Interfaces


Die Schnittstelle oder das Interface ist der Teil eines Systems, welches der Kommunikation dient.

.link https://de.wikipedia.org/wiki/Schnittstelle Wikipedia

In Go beschreibt ein Interface die Eigenschaften, welche ein Typ besitzen muss.

* Sprechweise

Typ User implementiert das Stringer Interface

Type user implements the stringer interface

* Definition

- In Go sind die Interfaces möglichst klein zu halten. 
- Bei nur einer Methode wird dem Methodenname ein _er_ angehängt.
- Bei der Deklaration müssen die Typen angegeben werden. Dies definiert das Layout im Arbeitsspeicher

  // Stringer returns a string representation of the type 
  type Stringer interface {
  	String() string
  }

- jeder Typ, welcher nun diese Methode besitzt implementiert automatisch dieses Interface
- im Code muss nicht explizit angegeben werden, dass ein Interface implementiert wird

* Interfaces als Input

Funktionen sollen wenn möglich Interfaces als Eingangswerte verwenden. Dadurch ist es möglich unterschiedliche Typen für diese Funktion zu verwenden.

  
* Beispiel Definition Interface

.code slide/geo/main.go /START1 OMIT/,/END1 OMIT/  

* Beispiel Implementierung Rechteck

.code slide/geo/main.go /START2 OMIT/,/END2 OMIT/  

* Beispiel Implementierung Dreieck

.play slide/geo/main.go /START3 OMIT/,/END3 OMIT/ 

* Abstraktion

- Interfaces eignen sich gut Funktionen zu abstrahieren (Single Responsibility Principle)
- Interfaces ermöglichen Tests der Funktion ohne die Implementierung zu benötigen.

* io.Reader und io.Writer

- eine der wichtigsten Interfaces in Go
- abstrahieren alle Lese- und Schreibvorgänge
- Anwendung: Files, Netzwerk, HTTP Server, Bilder, ...